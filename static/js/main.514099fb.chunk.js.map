{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["getRandomColor","color","i","Math","floor","random","_isRoom","_roomMap","_colors","push","App","useState","flrPlan","setFlrPlan","rowData","setRowData","maxLen","setMaxLen","useEffect","_rowData","split","max","map","v","length","className","defaultValue","onChange","e","target","value","c","_wallLen","match","some","clrIdx","console","log","_rowPlan","p","l","_mapped","j","k","style","background","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAyBA,SAASA,IAGP,IAFA,IACIC,EAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GAHY,mBAGKE,KAAKC,MAAsB,GAAhBD,KAAKE,WAEnC,OAAOJ,EAST,IALA,IAAIK,GAAU,EACVC,EAAW,GAGXC,EAAU,GACLN,EAAI,EAAGA,EAAI,IAAKA,IACvBM,EAAQC,KAAKT,KAgFAU,MA5Ef,WAAgB,IAAD,EACiBC,mBA3CvB,8IA0CM,mBACNC,EADM,KACGC,EADH,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGeJ,mBAAS,GAHxB,mBAGNK,EAHM,KAGEC,EAHF,KAyBb,OApBAC,qBAAU,WACR,IAAIC,EAAWP,EAAQQ,MAAM,MAC7BL,EAAWI,GACXF,EAAUd,KAAKkB,IAAL,MAAAlB,KAAI,YAAQgB,EAASG,KAAI,SAACC,GAAD,OAAOA,EAAEC,eAC3C,CAACZ,IAiBF,sBAAKa,UAAU,MAAf,UACE,iDACA,sBAAKA,UAAU,aAAf,UACE,gCACE,oDACA,0BAAUC,aAAcd,EAASe,SAVtB,SAACC,GAClBf,EAAWe,EAAEC,OAAOC,UAUd,oEAEF,gCACA,sDACChB,EAAQQ,KAAI,SAACS,EAAG7B,GAAO,IAAD,EACjB8B,EAAQ,UAAGD,EAAEE,MAAM,aAAX,aAAG,EAAeT,OAC9B,GAAI,CAACR,EAAQA,EAAS,GAAGkB,MAAK,SAACX,GAAD,OAAOA,GAAKS,KACxCzB,EAAW,GACXD,GAAU,OACL,GAAIU,EAAS,EAAIgB,GAAkB,KAAND,IAC7BzB,EAAS,CACZ,IAAI6B,EAASjC,EACbkC,QAAQC,IAAInC,GACZ,IAAIoC,EAAWP,EAAEX,MAAM,IAAIE,KAAI,SAACiB,EAAGC,GACjC,IAAIC,EAAU,GAKd,MAJU,MAANF,GACFE,EAAUF,EACVJ,EAASK,GAAKtC,GACTuC,EAAUjC,EAAQ2B,GAClBM,KAETlC,EAAW+B,EACXhC,GAAU,EAId,OACE,qBAAKmB,UAAU,MAAf,SACGM,EAAEX,MAAM,IAAIE,KAAI,SAACC,EAAGmB,GACnB,OAAIpC,GACW,MAANiB,GAlDDoB,EAkD0BD,EAhD5C,sBAAcE,MAAO,CAAEC,WAAYtC,EAASoC,IAA5C,qBAAWA,IAkDQpB,EApDF,IAACoB,MA+Cc,OAASzC,gBC5FhC4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.514099fb.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nconst inp = `\n##########\n\n#   #    #\n\n#   #    #\n\n## #### ##\n\n#    #   #\n\n#        #\n\n#  #######\n\n#  #  #  #\n\n#        #\n\n##########`;\n\n//Function to generate random hex colors\nfunction getRandomColor() {\n  var letters = '0123456789ABCDEF';\n  var color = '#';\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\n// Room map flag and color plan\nlet _isRoom = false;\nlet _roomMap = [];\n\n//Generate random 100 Colors \nlet _colors = [];\nfor (var i = 0; i < 100; i++) {\n  _colors.push(getRandomColor());\n}\n\n\nfunction App() {\n  const [flrPlan, setFlrPlan] = useState(inp);\n  const [rowData, setRowData] = useState([]);\n  const [maxLen, setMaxLen] = useState(0);\n\n  useEffect(() => {\n    let _rowData = flrPlan.split('\\n');\n    setRowData(_rowData);\n    setMaxLen(Math.max(..._rowData.map((v) => v.length)));\n  }, [flrPlan]);\n\n  // Room color generator will be update based on the roomMap\n  const getRoomColor = (k, v) => {\n    return (\n      <span key={k} style={{ background: _roomMap[k] }}>\n        &nbsp;&nbsp;\n      </span>\n    );\n  };\n\n  // Input handler to handle change in the input value\n  const changePlan = (e) => {\n    setFlrPlan(e.target.value)\n  };\n\n  return (\n    <div className='App'>\n      <h3>Colorized Rooms</h3>\n      <div className='App-header'>\n        <div>\n          <p>Provide Floor Plan:</p>\n          <textarea defaultValue={flrPlan} onChange={changePlan}></textarea>\n          <em>Please provide valid floor plan</em>\n        </div>\n        <div>\n        <p>Colorized Floor Plan:</p>\n        {rowData.map((c, i) => {\n          let _wallLen = c.match(/#/g)?.length;\n          if ([maxLen, maxLen / 2].some((v) => v <= _wallLen)) {\n            _roomMap = [];\n            _isRoom = false;\n          } else if (maxLen / 2 > _wallLen && c !== '') {\n            if (!_isRoom) {\n              let clrIdx = i;\n              console.log(i)\n              let _rowPlan = c.split('').map((p, l) => {\n                let _mapped = '';\n                if (p === '#') {\n                  _mapped = p;\n                  clrIdx = l || i;\n                } else _mapped = _colors[clrIdx];\n                return _mapped;\n              });\n              _roomMap = _rowPlan;\n              _isRoom = true;\n            }\n          }\n\n          return (\n            <div className='row' key={'row_' + i}>\n              {c.split('').map((v, j) => {\n                if (_isRoom) {\n                  return v !== '#' ? getRoomColor(j, v) : v;\n                } else {\n                  return v;\n                }\n              })}\n            </div>\n          );\n        })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}